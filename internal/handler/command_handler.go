package handler

import (
	"database/sql"
	"strconv"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"

	"github.com/REmakerzz/dental-clinic-bot/internal/config"
	"github.com/REmakerzz/dental-clinic-bot/internal/model"
	"github.com/REmakerzz/dental-clinic-bot/internal/service"
	"github.com/REmakerzz/dental-clinic-bot/internal/ui"
)

type CommandHandler struct {
	bot            *tgbotapi.BotAPI
	groupChatID    int64
	userBookings   map[int64]*model.Booking
	bookingService *service.BookingService
	config         *config.Config
}

func NewCommandHandler(bot *tgbotapi.BotAPI, groupChatID int64, bookingService *service.BookingService, userBookings map[int64]*model.Booking, cfg *config.Config) *CommandHandler {
	return &CommandHandler{
		bot:            bot,
		groupChatID:    groupChatID,
		userBookings:   userBookings,
		bookingService: bookingService,
		config:         cfg,
	}
}

func (h *CommandHandler) HandleMessage(msg *tgbotapi.Message) {
	chatID := msg.Chat.ID

	if msg.IsCommand() {
		switch msg.Command() {
		case "admin_help":
			h.handleAdminHelp(chatID, msg.From.ID)

		case "admin_list":
			h.handleAdminList(chatID, msg.From.ID)

		case "admin_stats":
			h.handleAdminStats(chatID, msg.From.ID)

		case "admin_delete":
			h.handleAdminDelete(chatID, msg.From.ID, msg.CommandArguments())

		default:
			h.bot.Send(tgbotapi.NewMessage(chatID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞."))
		}
	} else {
		// –Ω–µ–∫–æ–º–∞–Ω–¥–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Üí –º–æ–∂–Ω–æ –ø–æ—Ç–æ–º —Å—é–¥–∞ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É
		h.handleBookingFlow(msg)
	}
}

func (h *CommandHandler) handleAdminHelp(chatID int64, userID int64) {
	if service.IsAdmin(userID, h.config.AdminUserIDs) {
		helpText := "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã:\n\n" +
			"/admin_list ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏\n" +
			"/admin_stats ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n" +
			"/admin_delete N ‚Äî –£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É –ø–æ ID\n" +
			"/admin_help ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"

		h.bot.Send(tgbotapi.NewMessage(chatID, helpText))
	} else {
		h.bot.Send(tgbotapi.NewMessage(chatID, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã."))
	}
}

func (h *CommandHandler) handleAdminList(chatID int64, userID int64) {
	if service.IsAdmin(userID, h.config.AdminUserIDs) {
		bookings, err := h.bookingService.GetAllBookings()
		if err != nil {
			h.bot.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫."))
			return
		}

		if len(bookings) == 0 {
			h.bot.Send(tgbotapi.NewMessage(chatID, "–ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç."))
			return
		}

		for _, b := range bookings {
			text := "ID: " + strconv.Itoa(b.ID) + "\n" +
				"–ò–º—è: " + b.Name + "\n" +
				"–¢–µ–ª–µ—Ñ–æ–Ω: " + b.Phone + "\n" +
				"–£—Å–ª—É–≥–∞: " + b.Service + "\n" +
				"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: " + b.DateTime

			deleteButton := tgbotapi.NewInlineKeyboardButtonData("‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É", "delete:"+strconv.Itoa(b.ID))
			keyboard := tgbotapi.NewInlineKeyboardMarkup(
				tgbotapi.NewInlineKeyboardRow(deleteButton),
			)

			msg := tgbotapi.NewMessage(chatID, text)
			msg.ReplyMarkup = keyboard

			h.bot.Send(msg)
		}
	} else {
		h.bot.Send(tgbotapi.NewMessage(chatID, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã."))
	}
}

func (h *CommandHandler) handleAdminStats(chatID int64, userID int64) {
	if service.IsAdmin(userID, h.config.AdminUserIDs) {
		total, today, last7Days, err := h.bookingService.GetBookingStats()
		if err != nil {
			h.bot.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."))
			return
		}

		statsText := "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫:\n\n" +
			"–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: " + strconv.Itoa(total) + "\n" +
			"–ó–∞—è–≤–æ–∫ —Å–µ–≥–æ–¥–Ω—è: " + strconv.Itoa(today) + "\n" +
			"–ó–∞—è–≤–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π: " + strconv.Itoa(last7Days)

		h.bot.Send(tgbotapi.NewMessage(chatID, statsText))
	} else {
		h.bot.Send(tgbotapi.NewMessage(chatID, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã."))
	}
}

func (h *CommandHandler) handleAdminDelete(chatID int64, userID int64, args string) {
	if service.IsAdmin(userID, h.config.AdminUserIDs) {
		id, err := strconv.Atoi(strings.TrimSpace(args))
		if err != nil {
			h.bot.Send(tgbotapi.NewMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞—è–≤–∫–∏: /admin_delete 123"))
			return
		}

		err = h.bookingService.DeleteBookingByID(id)
		if err != nil {
			if err == sql.ErrNoRows {
				h.bot.Send(tgbotapi.NewMessage(chatID, "–ó–∞—è–≤–∫–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."))
			} else {
				h.bot.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏."))
			}
			return
		}

		h.bot.Send(tgbotapi.NewMessage(chatID, "–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞."))
	} else {
		h.bot.Send(tgbotapi.NewMessage(chatID, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã."))
	}
}

func (h *CommandHandler) handleBookingFlow(msg *tgbotapi.Message) {
	chatID := msg.Chat.ID
	text := msg.Text

	// —Å—Ç–∞—Ä—Ç—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å
	if text == "üóìÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏—ë–º" {
		h.userBookings[chatID] = &model.Booking{Step: 1}
		msg := tgbotapi.NewMessage(chatID, "–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
		h.bot.Send(msg)
		return
	}

	booking, exists := h.userBookings[chatID]
	if exists {
		switch booking.Step {
		case 1:
			booking.Name = text
			booking.Step++
			msg := tgbotapi.NewMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
			h.bot.Send(msg)
		case 2:
			booking.Phone = text
			booking.Step++
			msg := tgbotapi.NewMessage(chatID, "–ö–∞–∫—É—é —É—Å–ª—É–≥—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å?")
			msg.ReplyMarkup = ui.ServiceKeyboard()
			h.bot.Send(msg)
		case 3:
			booking.Service = text
			booking.Step++
			msg := tgbotapi.NewMessage(chatID, "–ù–∞ –∫–∞–∫—É—é –¥–∞—Ç—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è? (—Ñ–æ—Ä–º–∞—Ç: YYYY-MM-DD)")
			h.bot.Send(msg)
		case 4:
			// Validate date format
			_, err := time.Parse("2006-01-02", text)
			if err != nil {
				msg := tgbotapi.NewMessage(chatID, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD")
				h.bot.Send(msg)
				return
			}

			// Get available time slots for the selected date
			slots, err := h.bookingService.GetAvailableTimeSlots(text)
			if err != nil {
				msg := tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É.")
				h.bot.Send(msg)
				return
			}

			if len(slots) == 0 {
				msg := tgbotapi.NewMessage(chatID, "–ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É.")
				h.bot.Send(msg)
				return
			}

			// Create keyboard with available time slots
			var keyboard [][]tgbotapi.InlineKeyboardButton
			for _, slot := range slots {
				timeStr := slot[11:16] // Extract time part (HH:MM)
				keyboard = append(keyboard, []tgbotapi.InlineKeyboardButton{
					tgbotapi.NewInlineKeyboardButtonData(timeStr, "time:"+slot),
				})
			}

			msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:")
			msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(keyboard...)
			h.bot.Send(msg)
			booking.Step++
		case 5:
			// This step is handled by callback handler
			return
		default:
			msg := tgbotapi.NewMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")
			msg.ReplyMarkup = ui.MainMenuKeyboard()
			h.bot.Send(msg)
		}

		return
	}

	// –µ—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Üí –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –º–µ–Ω—é
	if service.IsAdmin(msg.From.ID, h.config.AdminUserIDs) || chatID == h.groupChatID {
		msg := tgbotapi.NewMessage(chatID, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
		msg.ReplyMarkup = ui.AdminMenuKeyboard()
		h.bot.Send(msg)
	} else {
		msg := tgbotapi.NewMessage(chatID, "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –î–µ–Ω—Ç–∞–ª—å –±–æ—Ç —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∫–ª–∏–Ω–∏–∫–∏. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
		msg.ReplyMarkup = ui.MainMenuKeyboard()
		h.bot.Send(msg)
	}
}
