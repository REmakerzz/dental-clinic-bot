package main

import (
	"database/sql"
	"log"
	"os"
	"strconv"
	"strings"

	"github.com/REmakerzz/dental-clinic-bot/internal/model"
	"github.com/REmakerzz/dental-clinic-bot/internal/repository"
	"github.com/joho/godotenv"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

var (
	adminUserIDs []int64
	db           *sql.DB
	userBookings = make(map[int64]*model.Booking)
)

func main() {

	db = repository.InitDB()
	defer db.Close()

	//–ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª
	err := godotenv.Load()
	if err != nil {
		log.Fatalf("Error loading .env file")
	}

	botToken := os.Getenv("TELEGRAM_BOT_TOKEN")
	if botToken == "" {
		log.Fatal("TELEGRAM_BOT_TOKEN not set")
	}

	bot, err := tgbotapi.NewBotAPI(botToken)
	if err != nil {
		log.Panic(err)
	}

	groupChatIDStr := os.Getenv("ADMIN_GROUP_CHAT_ID")
	groupChatID, err := strconv.ParseInt(groupChatIDStr, 10, 64)
	if err != nil {
		log.Fatalf("Invalid ADMIN_GROUP_CHAT_ID: %v", err)
	}

	log.Printf("Authorized on account %s", bot.Self.UserName)

	loadAdminUserIDs()
	log.Printf("Loaded adminUserIDs: %v", adminUserIDs)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message != nil {
			chatID := update.Message.Chat.ID

			// –µ—Å–ª–∏ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏—ë–º" ‚Äî —Å—Ç–∞—Ä—Ç—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å
			if update.Message.Text == "üóìÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏—ë–º" {
				userBookings[chatID] = &model.Booking{Step: 1}
				msg := tgbotapi.NewMessage(chatID, "–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
				bot.Send(msg)
				continue
			}

			if update.Message.IsCommand() {
				switch update.Message.Command() {
				case "admin_help":
					if isAdmin(update.Message.From.ID) {
						helpText := "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã:\n\n" +
							"/admin_list ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏\n" +
							"/admin_stats ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n" +
							"/admin_help ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"

						msg := tgbotapi.NewMessage(update.Message.Chat.ID, helpText)
						msg.ReplyMarkup = adminMenuKeyboard()
						bot.Send(msg)
					} else {
						msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
						bot.Send(msg)
					}
					continue
				case "admin_list":
					if isAdmin(update.Message.From.ID) {
						bookings, err := repository.GetAllBookings(db)
						if err != nil {
							msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫.")
							bot.Send(msg)
							continue
						}

						if len(bookings) == 0 {
							msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.")
							bot.Send(msg)
							continue
						}

						const batchSize = 10
						for i := 0; i < len(bookings); i += batchSize {
							end := i + batchSize
							if end > len(bookings) {
								end = len(bookings)
							}

							text := "–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫:\n\n"
							for _, b := range bookings[i:end] {
								text += "ID: " + strconv.Itoa(b.ID) + "\n" +
									"–ò–º—è: " + b.Name + "\n" +
									"–¢–µ–ª–µ—Ñ–æ–Ω: " + b.Phone + "\n" +
									"–£—Å–ª—É–≥–∞: " + b.Service + "\n" +
									"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: " + b.DateTime + "\n---\n"
							}

							msg := tgbotapi.NewMessage(update.Message.Chat.ID, text)
							bot.Send(msg)
						}
					} else {
						msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
						bot.Send(msg)
					}
					continue
				case "admin_stats":
					if isAdmin(update.Message.From.ID) {
						total, today, last7Days, err := repository.GetBookingStats(db)
						if err != nil {
							msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
							bot.Send(msg)
							continue
						}

						statsText := "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫:\n\n" +
							"–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: " + strconv.Itoa(total) + "\n" +
							"–ó–∞—è–≤–æ–∫ —Å–µ–≥–æ–¥–Ω—è: " + strconv.Itoa(today) + "\n" +
							"–ó–∞—è–≤–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π: " + strconv.Itoa(last7Days)

						msg := tgbotapi.NewMessage(update.Message.Chat.ID, statsText)
						msg.ReplyMarkup = adminMenuKeyboard()
						bot.Send(msg)
					} else {
						msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
						bot.Send(msg)
					}
					continue
				case "admin_delete":
					if isAdmin(update.Message.From.ID) {
						args := update.Message.CommandArguments()
						id, err := strconv.Atoi(strings.TrimSpace(args))
						if err != nil {
							msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞—è–≤–∫–∏: /admin_delete 123")
							bot.Send(msg)
							continue
						}

						err = repository.DeleteBookingByID(db, id)
						if err != nil {
							if err == sql.ErrNoRows {
								msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ó–∞—è–≤–∫–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
								bot.Send(msg)
							} else {
								msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏.")
								bot.Send(msg)
							}
							continue
						}

						msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
						bot.Send(msg)
					} else {
						msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
						bot.Send(msg)
					}
					continue
				}
			}

			booking, exists := userBookings[chatID]
			if exists {
				switch booking.Step {
				case 1:
					booking.Name = update.Message.Text
					booking.Step++
					msg := tgbotapi.NewMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
					bot.Send(msg)
				case 2:
					booking.Phone = update.Message.Text
					booking.Step++
					msg := tgbotapi.NewMessage(chatID, "–ö–∞–∫—É—é —É—Å–ª—É–≥—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å?")
					msg.ReplyMarkup = serviceKeyboard()
					bot.Send(msg)
				case 3:
					booking.Service = update.Message.Text
					booking.Step++
					msg := tgbotapi.NewMessage(chatID, "–ù–∞ –∫–∞–∫—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è?")
					bot.Send(msg)
				case 4:
					booking.DateTime = update.Message.Text
					booking.Step = 0 // —Å–±—Ä–æ—Å–∏–º step

					// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
					err := repository.SaveBooking(db, booking)
					if err != nil {
						log.Printf("Error saving booking: %v", err)
					}

					// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
					confirmMsg := tgbotapi.NewMessage(chatID, "–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–ø–∏—Å—å! –ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
					bot.Send(confirmMsg)

					// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
					adminMsg := tgbotapi.NewMessage(groupChatID, "–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏—ë–º:\n\n"+
						"–ò–º—è: "+booking.Name+"\n"+
						"–¢–µ–ª–µ—Ñ–æ–Ω: "+booking.Phone+"\n"+
						"–£—Å–ª—É–≥–∞: "+booking.Service+"\n"+
						"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: "+booking.DateTime)
					bot.Send(adminMsg)

					// –£–¥–∞–ª—è–µ–º –∏–∑ map
					delete(userBookings, chatID)
				default:
					msg := tgbotapi.NewMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")
					msg.ReplyMarkup = mainMenuKeyboard()
					bot.Send(msg)
				}

				continue
			}

			// –µ—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Üí –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
			// –µ—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Üí –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –º–µ–Ω—é
			if isAdmin(update.Message.From.ID) || chatID == groupChatID {
				msg := tgbotapi.NewMessage(chatID, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
				msg.ReplyMarkup = adminMenuKeyboard()
				bot.Send(msg)
			} else {
				msg := tgbotapi.NewMessage(chatID, "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∫–ª–∏–Ω–∏–∫–∏. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
				msg.ReplyMarkup = mainMenuKeyboard()
				bot.Send(msg)
			}
		}
	}
}

func mainMenuKeyboard() tgbotapi.ReplyKeyboardMarkup {
	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üóìÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏—ë–º"),
			tgbotapi.NewKeyboardButton("üìã –ù–∞—à–∏ —É—Å–ª—É–≥–∏"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üí≥ –¶–µ–Ω—ã"),
			tgbotapi.NewKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"),
		),
	)
	keyboard.ResizeKeyboard = true
	return keyboard
}

func adminMenuKeyboard() tgbotapi.ReplyKeyboardMarkup {
	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("/admin_list"),
			tgbotapi.NewKeyboardButton("/admin_stats"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("/admin_help"),
			tgbotapi.NewKeyboardButton("‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
		),
	)
	keyboard.ResizeKeyboard = true
	return keyboard
}

func serviceKeyboard() tgbotapi.ReplyKeyboardMarkup {
	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —á–∏—Å—Ç–∫–∞"),
			tgbotapi.NewKeyboardButton("–õ–µ—á–µ–Ω–∏–µ –∫–∞—Ä–∏–µ—Å–∞"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–ü—Ä–æ—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ"),
			tgbotapi.NewKeyboardButton("–ò–º–ø–ª–∞–Ω—Ç–∞—Ü–∏—è"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–û—Ç–±–µ–ª–∏–≤–∞–Ω–∏–µ"),
			tgbotapi.NewKeyboardButton("–î—Ä—É–≥–æ–µ"),
		),
	)
	keyboard.ResizeKeyboard = true
	return keyboard
}

func loadAdminUserIDs() {
	idsStr := os.Getenv("ADMIN_USER_IDS")
	idsSlice := strings.Split(idsStr, ",")
	for _, idStr := range idsSlice {
		idStr = strings.TrimSpace(idStr)
		idInt, err := strconv.ParseInt(idStr, 10, 64)
		if err != nil {
			log.Fatalf("Invalid ADMIN__USER_IDS: %v", err)
		}
		adminUserIDs = append(adminUserIDs, idInt)
	}
}

func isAdmin(userID int64) bool {
	for _, id := range adminUserIDs {
		if userID == id {
			return true
		}
	}
	return false
}
